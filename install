require 'open3'


# griffin install for mac
def installEverything
    # FIXME, handle if there are mutliple users
    
    #
    # xcode tools 
    #
        puts "Starting install of x-code tools"
        stdout, stderr, status = Open3.capture3("bash;xcode-select --install")
        if stderr.match(/xcode-select: error: command line tools are already installed/)
            puts "xcode tools are installed, checking for xcode update"
            list_of_updates = `softwareupdate -l`
            update_name = list_of_updates.match(/(?<=\* )Command Line Tools.+/)
            if update_name != nil
                puts "There is an update so I'm going to go ahead and install it okay?"
                gets
                puts "Okay starting installation"
                `softwareupdate --install "#{update_name[0]}"`
                puts "software update complete"
            else 
                puts "Your xcode should be up to date!"
            end#if update
        end#if already installed
        puts "Okay xcode should be installed, press enter to continue"
        gets

    #
    # homebrew
    #
        #check homebrew
        puts "about to check homebrew"
        # Why is there "bash;..."? because without it, the 
        # capture3 will throw an error and exit the program
        # with bash; the error is contained with stderr
        stdout, stderr, status = Open3.capture3("bash;brew -v")
        homebrew_installed = (  nil != stdout.match(/Homebrew \d+\.\d+/)  )

        if not homebrew_installed

            puts "your password is needed to install homebrew (press enter)"
            `/usr/bin/ruby -e "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)" 2>/dev/null`

            #check homebrew
            stdout, stderr, status = Open3.capture3("bash;brew -v")
            homebrew_installed = (  nil != stdout.match(/Homebrew \d+\.\d+/)  )
        
        end#if not installed
        
        # FIXME, what to do if homebrew didn't install after trying to install
        if not homebrew_installed
            puts "I couldn't get homebrew to install for some reason :/"
            return 
        end#if
    
        puts "Okay homebrew is installed, press enter to continue"
        gets

    #
    # node.js
    #

        puts "okay, starting to install node"
        stdout, stderr, status = Open3.capture3("bash;brew install node")
        if stderr.match(/Warning: node [\d\._]+ is already installed/)
            puts "Okay good node was already installed, let me check a few things"
        end
        # Does path need to be fixed?
            # lots of times when installing node
            # the node command still wont work because the 
            # computer doesnt know where the command is
            # so the path (where your computer looks) has to be manually updated
            path_fix_is_needed = stderr.match(/If you need to have this software first in your PATH run:/)
            path_fix = stderr.match(/If you need to have this software first in your PATH run:\n\s+(?<FirstPathCommand>.+)\n(?<SecondPathCommand>.+)/)
            # check for error 
                if path_fix_is_needed and (path_fix == nil)
                    puts "There is a problem :/"
                    puts "Homebrew was installing node"
                    puts "But (as usual) $PATH needed to be updated manually"
                    puts "But the regex couldn't find how to update the path"
                    puts "here is what homebrew said:"
                    puts output.gsub(/(\n|^)/,"    \n")
                    return
                end#if
            # try to add stuff to bash profile
            if path_fix != nil
                puts "    Your PATH needs to be fixed for node"
                puts "    but I'll go ahead and take care of it"
                first_command = path_fix["FirstPathCommand"]
                second_command = path_fix["SecondPathCommand"]
                # extract the actual path
                first_command.sub(/^echo '/,"")
                first_command.sub(/' >> ~\/\.bash_profile$/,"")
                second_command.sub(/^echo '/,"")
                second_command.sub(/' >> ~\/\.bash_profile$/,"")
                # FIXME, check and see if those locations are already in the path/ .bash_profile
                # add those commands to the bash profile 
                bash_profile = File.open(Dir.home+'/.bash_profile','a')
                exact_install_string = "# When griffin was installing node (through homebrew)\n# the PATH needed to be extended to include the node and npm commands\n# so the next two lines were added here in order to do that\n#{first_command}\n#{second_command}"
                # FIXME store exact_install_string somewhere so that uninstalls can be done easily
                bash_profile.puts(exact_install_string)
                bash_profile.close
                puts "    Okay, node was added to your path"
            end#if 

            # FIXME, add a fix for the compiler variables too 
        

        # check node
        stdout, stderr, status = Open3.capture3("bash;node -v")
        node_installed = (  nil != stdout.match(/v\d+\.\d+/)  )
        # check npm
        stdout, stderr, status = Open3.capture3("bash;npm -v")
        npm_installed = ( nil != stdout.match(/\d+\.\d+/))

        # FIXME, what to do if node didn't install
        if not node_installed or not npm_installed
            puts "I couldn't get node.js installed :/"
            return
        end#if
        
        
        puts "Okay, I checked and node is installed"
        gets

    #
    # pug, SASS, CoffeeScript, Electron, Electron-Dev
    #
        puts "about to install pug"
        # pug -V
        # pug version: 2.0.0-rc.4
        # pug-cli version: 1.0.0-alpha6
        `npm install -g pug`
        `npm install pug-cli -g`
        
        puts "about to install sass"
        # sass --version
        # 1.0.0-beta.4 compiled with dart2js 2.0.0-dev.10.0
        `npm install -g sass`

        puts "about to install coffeescript"
        # coffee -v
        # CoffeeScript version 1.12.7
        `npm install -g coffeescript`

        puts "about to install electron"
        # electron -v
        # v1.7.10
        `npm install -g electron`

        puts "about to install electron-dev"
        `npm install -g electron-dev`

        puts "about to install electron-debug"
        `npm install -g electron-debug`

        puts "okay all of those should be installed"
        puts 
        puts "I'm going to put the Griffin files in /usr/local/bin/"
        puts "(Thats where pretty much all normal commands go)"
        `curl -fsSL https://raw.githubusercontent.com/jeff-hykin/Griffin/master/Griffin.rb 1>/usr/local/bin/Griffin.rb`
        `chmod u+x /usr/local/bin/Griffin.rb`
        `curl -fsSL https://raw.githubusercontent.com/jeff-hykin/Griffin/master/griffin 1>/usr/local/bin/griffin`
        `chmod u+x /usr/local/bin/griffin`
        puts "Okay, Griffin has been installed!"
        
end#installEverything
installEverything
